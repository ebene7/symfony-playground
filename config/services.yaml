# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    foo: 42

    doctrine:
        dbal:
            dbname: playground
            host: localhost
            user: dev_amd
            password: admdev01
            driver: pdo_mysql
#            types:
#                myobjectstring: \App\DBAL\Type\ObjectString
#            mapping_types:
#                myobjectstring: string

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\DBAL\Converters\ChainConverter:
        public: true
        arguments:
            - !tagged doctrine.mapping.converter

    App\DBAL\Converters\EntityToStringConverter:
        tags:
            - { name: 'doctrine.mapping.converter', priority: 50 }

    App\DBAL\Converters\StringToEntityConverter:
        arguments:
            - '@doctrine.orm.entity_manager'
        tags:
            - { name: 'doctrine.mapping.converter', priority: 50 }

    App\EventListener\MappingListener:
        arguments:
            - '@service_container'
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
            - { name: doctrine.event_listener, event: !php/const:\App\DBAL\Event\TypeMapperEventArgs::NAME }
